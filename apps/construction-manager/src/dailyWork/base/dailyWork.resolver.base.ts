/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDailyWorkArgs } from "./CreateDailyWorkArgs";
import { UpdateDailyWorkArgs } from "./UpdateDailyWorkArgs";
import { DeleteDailyWorkArgs } from "./DeleteDailyWorkArgs";
import { DailyWorkCountArgs } from "./DailyWorkCountArgs";
import { DailyWorkFindManyArgs } from "./DailyWorkFindManyArgs";
import { DailyWorkFindUniqueArgs } from "./DailyWorkFindUniqueArgs";
import { DailyWork } from "./DailyWork";
import { DailyWorkService } from "../dailyWork.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DailyWork)
export class DailyWorkResolverBase {
  constructor(
    protected readonly service: DailyWorkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "read",
    possession: "any",
  })
  async _dailyWorksMeta(
    @graphql.Args() args: DailyWorkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DailyWork])
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "read",
    possession: "any",
  })
  async dailyWorks(
    @graphql.Args() args: DailyWorkFindManyArgs
  ): Promise<DailyWork[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DailyWork, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "read",
    possession: "own",
  })
  async dailyWork(
    @graphql.Args() args: DailyWorkFindUniqueArgs
  ): Promise<DailyWork | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DailyWork)
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "create",
    possession: "any",
  })
  async createDailyWork(
    @graphql.Args() args: CreateDailyWorkArgs
  ): Promise<DailyWork> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DailyWork)
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "update",
    possession: "any",
  })
  async updateDailyWork(
    @graphql.Args() args: UpdateDailyWorkArgs
  ): Promise<DailyWork | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DailyWork)
  @nestAccessControl.UseRoles({
    resource: "DailyWork",
    action: "delete",
    possession: "any",
  })
  async deleteDailyWork(
    @graphql.Args() args: DeleteDailyWorkArgs
  ): Promise<DailyWork | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
